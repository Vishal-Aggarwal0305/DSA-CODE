/* Dynamic Programming solution to construct
Maximum Length Chain of Pairs */
#include <bits/stdc++.h>
using namespace std;

struct Pair
{
	int a;
	int b;
};

// comparator function for sort function
int compare(Pair x, Pair y)
{
	return x.a < y.a;
}

// Function to construct Maximum Length Chain
// of Pairs
void maxChainLength(vector<Pair> arr)
{
	// Sort by start time
	sort(arr.begin(), arr.end(), compare);

	// L[i] stores maximum length of chain of
	// arr[0..i] that ends with arr[i].
	vector<vector<Pair> > L(arr.size());

	// L[0] is equal to arr[0]
	L[0].push_back(arr[0]);

	// start from index 1
	for (int i = 1; i < arr.size(); i++)
	{
		// for every j less than i
		for (int j = 0; j < i; j++)
		{
			// L[i] = {Max(L[j])} + arr[i]
			// where j < i and arr[j].b < arr[i].a
			if ((arr[j].b < arr[i].a) &&
				(L[j].size() > L[i].size()))
				L[i] = L[j];
		}
		L[i].push_back(arr[i]);
	}

	// print max length vector
	vector<Pair> maxChain;
	for (vector<Pair> x : L)
		if (x.size() > maxChain.size())
			maxChain = x;

	for (Pair pair : maxChain)
		cout << "(" << pair.a << ", "
			<< pair.b << ") ";
}

// Driver Function
int main()
{
	Pair a[] = {{5, 29}, {39, 40}, {15, 28},
				{27, 40}, {50, 90}};
	int n = sizeof(a)/sizeof(a[0]);

	vector<Pair> arr(a, a + n);

	maxChainLength(arr);

	return 0;
}
