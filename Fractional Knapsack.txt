//Espresso
//headers
#include<stdio.h>
#include<stdlib.h>
#include<math.h>

//defining struct
struct knap
{
    float x[10]; //solution vectors
    float profit; //total profit
};

struct knap tksv;

//function prototypes
struct knap* mergesort(float *v, int, int);
struct knap* knapsack(int *n, float *w, float *c, float *W);
void merge(float *v, int, int, int);
int indexcount(float a, float b[20], int n);

//to get the index
int indexcount(float a, float b[20], int n)
{
    int i;
    for(i=0; i<n; i++)
    {
        if(a=b[i])
        {
            return i;
        }
    }
}

//merge sort
struct knap* mergesort(float *v, int p, int r)
{
    int q;
    if(p<r)
    {
        q=floor((p+r)/2);
    }
    mergesort(v,p,q);
    mergesort(v,q+1,r);
    merge(v,p,q,r);
}

//merge
void merge(float *v, int p, int q, int r)
{
    int n1, n2, i;
    n1=q-p+1;
    n2=r-q;
    float L[n1], R[n2];
    for(i=0; i<n1; i++)
    {
        L[i]=v[p+i-1];
    }
    for(i=0; i<n2; i++)
    {
        R[i]=v[q+i];
    }
    
    
    
    i=1;
    int j=1,k;
    for(k=p;k<=r;k++)
    {
        if(L[i]<=R[i])
        {
            v[k]=L[i];
            i=i+1;
        }
        else
        {
            v[k]=R[j];
            j=j+1;
        }
    }
}

//knapsack
struct knap* knapsack(int *n, float *w, float *c, float *W)
{
    struct knap sack;        //=(struct node*)malloc(n * sizeof(struct node));
    int i, index[20];
    float v[20], unsortedv[20], sorted[20], unsortedc[20], unsortedw[20], sortedv[20];
    for(i=0;i<*n;i++)
    {
        sack.x[i]=0;
        v[i]=c[i]/w[i];
        printf("v[%d]=%f",v[i]);
    }
    for(i=0;i<*n;i++)
    {
        unsortedv[i]=v[i];
    }
    mergesort(v, 0, *n-1);     //sorting and all 
    for(i=0;i<*n;i++)
    {
        sortedv[i]=v[i];
    }
    for(i=0;i<*n;i++)
    {
        v[i]=sortedv[*n-i-1];
    }
    for(i=0;i<*n;i++)
    {
        printf("The v[%d]=%f ",i, v[i]);
    }
    for(i=0;i<*n;i++)
    {
        index[i]=indexcount(v[i],unsortedv,*n);
    }
    for(i=0;i<*n;i++)
    {
        unsortedc[i]=c[i];
    }
    for(i=0;i<*n;i++)
    {
        unsortedw[i]=w[i];
    }
    for(i=0;i<*n;i++)
    {
        c[i]=unsortedc[index[i]];
        w[i]=unsortedw[index[i]];
    }
    
    i=1;
    while((W!=0)&&(i<=*n))
    {
        if(*W>=w[i])
        {
            sack.x[i]=1;
            *W=*W-((sack.x[i])*(w[i]));
        }
        else
        {
            sack.x[i]=W[i]/w[i];
            *W=*W-(sack.x[i]*w[i]);
        }
    }
    return *sack;
}

//main function
int main()
{
    float w[20], c[20], W, profit, x[20]; //w[i], and c[i] are weights, and cost, W is the knapsack capacity
    int n; //n is the number of objects
    printf("Enter the Number of Objects:");
    scanf("%d", &n);
    for (int i = 0; i<n; i++)
    {
        printf("Enter the Weight of the object O[%d]", i);
        printf("w[%d]=",i);
        scanf("%f", &w[i]);
    }
    for (int i = 0; i<n; i++)
    {
        printf("Enter the Cost of the object O[%d]", i);
        printf("c[%d]=",i);
        scanf("%f", &c[i]);
    }
    printf("Enter the capacity of knapsack:");
    scanf("%f", &W);
    struct knap *pseudosack=knapsack(&n, w, c, &W);                   //gotta take & save value in something <ex: struct node *tksv
    printf("The solution vector is");
    for (int i = 0; i < n; i++)
    {
        printf("x[%d]=%f", i, x[i]);            //this x[i] is of struct node so, tksv.x[i](made)
    }
    // calculate profit
    tksv.profit=0;                //to reduce error prob.
    for(int i=0;i<n;i++)
    {
        tksv.profit=tksv.profit+(c[i]*tksv.x[i]);       
        tksv.profit[i]=c[i]*tksv.x[i];     //since, profit&x[i]are of struct node
    }
    printf("\nMaximum profit is: %f", profit);            //tksv.profit

    return(0);
}